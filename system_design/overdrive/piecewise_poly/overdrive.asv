function y = overdrive(x)
% OVERDRIVE  Sample-by-sample DSP guitar overdrive
%    y = OVERDRIVE(x) applies:
%      1) FIR anti-alias LP
%      2) IIR high-pass (rumble removal)
%      3) piecewise nonlinearity
%      4) IIR low-pass (output smoothing)
%
%   Call with a vector of samples like:
%     y = arrayfun(@overdrive, x_in);
%
persistent fir_taps fir_buf fir_idx
persistent hp_b hp_a hp_xz hp_yz
persistent lp_b lp_a lp_xz lp_yz
persistent init
fs = 44100;        % sampling frequency
hp_fc   = 200;     % high-pass corner freq (Hz)
lp_fc   = 3000;    % low-pass corner freq (Hz)
hp_ord  = 2;       % HP filter order
lp_ord  = 2;       % LP filter order
gain = 40;

if isempty(init)
    tic()
    %% 1) Anti-alias FIR LP taps
    fir_taps = [ 0.0009378499381862079 0.0009851563217279343 -0.001335022119489159 -0.005352027065935874 -0.006842277361396169 -0.0026053545706024653 0.0039403888196034515 0.004896035711415815 -0.0020106920274867916 -0.008133342847464963 -0.003635411703384118 0.007762043948384333 0.010466693106093227 -0.0022861968346553543 -0.015237255586699363 -0.00829047227083722 0.013648285780166684 0.020841479628351495 -0.0025201285994926733 -0.029440951808583162 -0.018524953293150667 0.026384439760317263 0.04620964698893607 -0.0026421514948045464 -0.07417968841139486 -0.05912723076515398 0.09498615637867983 0.3013156653659919 0.39732145959071546 0.3013156653659919 0.09498615637867983 -0.05912723076515398 -0.07417968841139486 -0.0026421514948045464 0.04620964698893607 0.026384439760317263 -0.018524953293150667 -0.029440951808583162 -0.0025201285994926733 0.020841479628351495 0.013648285780166684 -0.00829047227083722 -0.015237255586699363 -0.0022861968346553543 0.010466693106093227 0.007762043948384333 -0.003635411703384118 -0.008133342847464963 -0.0020106920274867916 0.004896035711415815 0.0039403888196034515 -0.0026053545706024653 -0.006842277361396169 -0.005352027065935874 -0.001335022119489159 0.0009851563217279343 0.0009378499381862079 ];    % e.g. 1Ã—N vector of your low-pass taps
    N = numel(fir_taps);
    fir_buf = zeros(1,N);
    fir_idx = 1;

    %% 2) IIR high-pass (2nd order) coefficients
    % hp_b = [b0, b1, b2];
    % hp_a = [1,  a1, a2];
    hp_Wn = hp_fc/(fs/2);
    [hp_b, hp_a] = butter(hp_ord, hp_Wn, 'high');
    hp_xz = zeros(1,2);   % x[n-1], x[n-2]
    hp_yz = zeros(1,2);   % y[n-1], y[n-2]

    %% 4) IIR low-pass (2nd order) coefficients
    % lp_b = [b0, b1, b2];
    % lp_a = [1,  a1, a2];
    lp_Wn = lp_fc/(fs/2);
    [lp_b, lp_a] = butter(lp_ord, lp_Wn, 'low');
    lp_xz = zeros(1,2);   % x[n-1], x[n-2]
    lp_yz = zeros(1,2);   % y[n-1], y[n-2]

    init = true;
end

%% 1) FIR anti-aliasing LP (circular buffer)
fir_buf(fir_idx) = x;
y1 = 0;
for k = 1:numel(fir_taps)
    idx = fir_idx - k + 1;
    if idx < 1, idx = idx + numel(fir_taps); end
    y1 = y1 + fir_taps(k) * fir_buf(idx);
end
fir_idx = mod(fir_idx, numel(fir_taps)) + 1;

%% 2) IIR high-pass
y2 = hp_b(1)*y1 + hp_b(2)*hp_xz(1) + hp_b(3)*hp_xz(2) ...
     - hp_a(2)*hp_yz(1) - hp_a(3)*hp_yz(2);
% shift delays
hp_xz(2) = hp_xz(1);  hp_xz(1) = y1;
hp_yz(2) = hp_yz(1);  hp_yz(1) = y2;

%% 3) Nonlinear piecewise distortion
% TODO: replace this with your piecewise mapping on abs(y2)
%   e.g. if a<1/3, f(a)=...; elseif a<2/3, f(a)=...; else f(a)=...
a = gain*y2;
sign_a = sign(a);
u = abs(a);
if u < 1/3
    v = 2*a;
elseif u < 2/3
    v = sign_a * (3 - (2 - 3*u) * (2 - 3*u))/3;
else
    v = sign_a;
end
y3 = v;

%% 4) IIR low-pass
y4 = lp_b(1)*y3 + lp_b(2)*lp_xz(1) + lp_b(3)*lp_xz(2) ...
     - lp_a(2)*lp_yz(1) - lp_a(3)*lp_yz(2);
% shift delays
lp_xz(2) = lp_xz(1);  lp_xz(1) = y3;
lp_yz(2) = lp_yz(1);  lp_yz(1) = y4;

y = y4;
end