%Tremolo
clear; clc;
%{
%Parameter declaration
[input, fs] = audioread('pen15.wav');   %Input and samplingfreq
Modfreq = 5;                            %LFO frequency
depth = 0.5;                              %tremolo depth

function output=tremolo_effect(Modfreq,depth,fs,input)

%signal modulation
t = (0:length(input)-1)/fs;                           %create index for lfo
lfo = sin(2*pi*Modfreq*t);                            %creates lfo with freq and depth
%lfo = sawtooth(2*pi*Modfreq*t,.5)                    %Triangle wave
%lfo = square(2*pi*Modfreq*t)                         %Square wave

tremolo = (1 - depth)+depth*lfo;


output = input .* tremolo;                            %AM modulate input with lfo

% Normalize the output based of max value of in and out
overall_gain = max(abs(input(:))) / max(abs(output(:)));
output = output .* overall_gain;

%outputs
%sound(output, fs); % Play the processed sound
%audiowrite('output_tremolo.wav', output, fs); %save file
end

output_signal = tremolo_effect(Modfreq, depth, fs, input);

sound(output_signal, fs);
%}

[input, fs] = audioread('input.wav');   % Input and samplingfreq
modFreq = 5;                            % LFO frequency
depth = 0.5;                            % Tremolo depth (0 to 1)
initVal = 1;                            % Initial Value 

function output=tremolo_effect(modFreq,depth,fs,input)
t = (0:length(input)-1)/fs;             % Create index for lfo
lfo = sin(2*pi*modFreq*t);              % Sin wave (lfo)
%lfo = sawtooth(2*pi*modFreq*t,.5)      % Triangle wave (lfo)
%lfo = square(2*pi*modFreq*t)           % Square wave (lfo)
tremolo = initVal + depth * lfo;          
output = input .* tremolo;              % AM modulate input with lfo

% Normalize the output based of max value of in and out
overall_gain = max(abs(input(:))) / max(abs(output(:)));
output = output * overall_gain;
end

% Outputs
output_signal = tremolo_effect(Modfreq, depth, fs, input);
sound(output_signal, fs);               % Play the processed sound