% Read CSV data (assuming time in 1st column, dB level in 2nd column)
%data = readmatrix('scope_5_4s.csv'); % Replace with your filename
data = readtable('scope_5_4s.csv');
time = data(:, 1);
db_level = data(:, 2);

% Convert dB to linear power scale
power = 10.^(db_level / 10);

% Backward Schroeder integration
reversed_power = flip(power);
cumulative_energy = cumsum(reversed_power);
cumulative_energy = flip(cumulative_energy);
normalized_energy = cumulative_energy / max(cumulative_energy);
decay_curve_db = 10 * log10(normalized_energy);

% Remove values below noise floor (-30 dB)
valid_idx = decay_curve_db >= -30;
time_valid = time(valid_idx);
decay_valid = decay_curve_db(valid_idx);

% Find RT20 region (-5 dB to -25 dB)
rt20_mask = decay_valid >= -25 & decay_valid <= -5;
t_rt20 = time_valid(rt20_mask);
y_rt20 = decay_valid(rt20_mask);

% Linear regression
coefficients = polyfit(t_rt20, y_rt20, 1);
slope = coefficients(1);
intercept = coefficients(2);

% Calculate RT60
RT60 = -60 / slope;

% Extrapolate to -60 dB
t_extrap = linspace(min(time_valid), max(time_valid) + RT60, 100);
y_extrap = polyval(coefficients, t_extrap);

% Plot results
figure;
hold on;
plot(time_valid, decay_valid, 'b', 'LineWidth', 1.5, 'DisplayName', 'Decay Curve');
plot(t_rt20, y_rt20, 'g', 'LineWidth', 2, 'DisplayName', 'RT20 Region');
plot(t_extrap, y_extrap, 'r--', 'LineWidth', 1.5, 'DisplayName', 'Extrapolation');
yline(-60, 'k--', 'DisplayName', '-60 dB');
xlabel('Time (s)');
ylabel('Level (dB)');
title(['Schroeder Decay Curve | RT60 = ', num2str(RT60, 2), ' s']);
legend;
grid on;

% Display results
disp(['Estimated RT60: ', num2str(RT60, 2), ' seconds']);